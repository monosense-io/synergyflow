openapi: 3.1.0
info:
  title: SynergyFlow API - Changes
  version: 1.0.0
paths:
  /changes:
    get:
      tags: [Changes]
      summary: List changes
      operationId: listChanges
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/Page'
        - $ref: '../modules/shared.yaml#/components/parameters/Limit'
        - in: query
          name: status
          schema: { $ref: '../modules/shared.yaml#/components/schemas/ChangeStatus' }
        - in: query
          name: type
          schema: { $ref: '../modules/shared.yaml#/components/schemas/ChangeType' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page: { type: integer }
                  limit: { type: integer }
                  total: { type: integer }
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Change' }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }
    post:
      tags: [Changes]
      summary: Create change
      operationId: createChange
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ChangeCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Change' } } } }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }

  /changes/{id}:
    get:
      tags: [Changes]
      summary: Get change
      operationId: getChange
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/IdPath'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Change' } } } }
        '404': { $ref: '../modules/shared.yaml#/components/responses/NotFound' }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }
    patch:
      tags: [Changes]
      summary: Update change (partial)
      operationId: updateChange
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/IdPath'
        - $ref: '../modules/shared.yaml#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ChangeUpdate' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Change' } } } }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }

  /changes/{id}/approvals:
    get:
      tags: [Changes]
      summary: List approvals
      operationId: listChangeApprovals
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/IdPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ChangeApproval' }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }
    post:
      tags: [Changes]
      summary: Submit approval decision
      operationId: submitChangeApproval
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/IdPath'
        - $ref: '../modules/shared.yaml#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [approverId, decision]
              properties:
                approverId: { type: string }
                decision: { type: string, enum: [APPROVED, REJECTED] }
                comments: { type: string, nullable: true, maxLength: 2000 }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/ChangeApproval' } } } }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }

  /changes/{id}/schedule:
    post:
      tags: [Changes]
      summary: Schedule change window
      operationId: scheduleChange
      parameters:
        - $ref: '../modules/shared.yaml#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [scheduledDate]
              properties:
                scheduledDate: { type: string, format: date-time }
      responses:
        '204': { description: No Content }
        default: { $ref: '../modules/shared.yaml#/components/responses/ErrorResponse' }

components:
  schemas:
    Change:
      type: object
      required: [id, title, type, status, createdAt]
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string, nullable: true }
        type: { $ref: '../modules/shared.yaml#/components/schemas/ChangeType' }
        status: { $ref: '../modules/shared.yaml#/components/schemas/ChangeStatus' }
        riskLevel: { type: string, enum: [LOW, MEDIUM, HIGH], nullable: true }
        priority: { type: string, nullable: true }
        rollbackPlan: { type: string, nullable: true }
        rollbackVerified: { type: boolean, nullable: true }
        createdBy: { type: string }
        assignedTo: { type: string, nullable: true }
        teamId: { type: string, nullable: true }
        scheduledDate: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }
    ChangeCreate:
      type: object
      required: [title, type, createdBy]
      properties:
        title: { type: string }
        description: { type: string, nullable: true }
        type: { $ref: '../modules/shared.yaml#/components/schemas/ChangeType' }
        riskLevel: { type: string, enum: [LOW, MEDIUM, HIGH], nullable: true }
        priority: { type: string, nullable: true }
        createdBy: { type: string }
        teamId: { type: string, nullable: true }
    ChangeUpdate:
      type: object
      properties:
        title: { type: string }
        description: { type: string, nullable: true }
        status: { $ref: '../modules/shared.yaml#/components/schemas/ChangeStatus' }
        riskLevel: { type: string, enum: [LOW, MEDIUM, HIGH], nullable: true }
        priority: { type: string, nullable: true }
    ChangeApproval:
      type: object
      required: [id, changeId, approverId, decision]
      properties:
        id: { type: string }
        changeId: { type: string }
        approverId: { type: string }
        decision: { type: string, enum: [APPROVED, REJECTED] }
        comments: { type: string, nullable: true }
        approvedAt: { type: string, format: date-time, nullable: true }

